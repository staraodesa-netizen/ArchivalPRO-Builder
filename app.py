import streamlit as st
from io import BytesIO
from docx import Document
from docx.shared import Pt
from PIL import Image
import google.generativai as genai

# ===================================================================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI –∫–ª—é—á–∞ —Ç–∞ –º–æ–¥–µ–ª—ñ
# ===================================================================
AI_MODEL_NAME = 'gemini-1.5-flash-latest'

try:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
except Exception as e:
    st.error("–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Google AI. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ —Ñ–∞–π–ª .streamlit/secrets.toml —ñ –¥–æ–¥–∞–ª–∏ —Ç—É–¥–∏ –≤–∞—à GOOGLE_API_KEY.")
    st.stop()

# ===================================================================
# –ö–ï–®–û–í–ê–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó AI (–ï–ö–û–ù–û–ú–Ü–Ø –ß–ê–°–£ –¢–ê –ì–†–û–®–ï–ô)
# ===================================================================

@st.cache_data
def ocr_with_gemini_vision(img_bytes: bytes, filename: str):
    """–†–æ–∑–ø—ñ–∑–Ω–∞—î —Ç–µ–∫—Å—Ç –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Gemini Vision."""
    img = Image.open(BytesIO(img_bytes))
    try:
        model = genai.GenerativeModel(AI_MODEL_NAME)
        prompt = "–¢–∏ ‚Äî –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ OCR. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–π —Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–π –≤–µ—Å—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ü—å–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ. –ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ —á–∏—Å—Ç–∏–π —Ç–µ–∫—Å—Ç."
        response = model.generate_content([prompt, img])
        return response.text
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è ({filename}): {e}")
        return None

@st.cache_data
def process_text_with_gemini(raw_text: str, style: str, filename: str):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –∑–≥—ñ–¥–Ω–æ –∑ –æ–±—Ä–∞–Ω–∏–º —Å—Ç–∏–ª–µ–º."""
    if not raw_text:
        return ""
    
    prompts = {
        "–õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è": f"""
            –¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –≤–∑—è—Ç–∏ —Å–∏—Ä–∏–π —Ç–µ–∫—Å—Ç —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –π–æ–≥–æ –Ω–∞ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω—É, —á–∏—Å—Ç—É —Ç–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω—É —Å—Ç–∞—Ç—Ç—é.
            –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:
            1. –ü—Ä–∏–¥—É–º–∞–π –≤–ª—É—á–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫.
            2. –†–µ—Ç–µ–ª—å–Ω–æ –≤–∏–ø—Ä–∞–≤ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏ (–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ, –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ).
            3. –†–æ–∑–±–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥—ñ—á–Ω—ñ –∞–±–∑–∞—Ü–∏.
            4. –í–∏–¥–∞–ª–∏ –±—É–¥—å-—è–∫—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ OCR.
            5. –ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—É —Å—Ç–∞—Ç—Ç—é —ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º. –ù–µ –ø–∏—à–∏ –∂–æ–¥–Ω–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.
            –û—Å—å —Å–∏—Ä–∏–π —Ç–µ–∫—Å—Ç: --- {raw_text} ---
        """,
        "–¢—ñ–ª—å–∫–∏ –∫–æ—Ä–µ–∫—Ü—ñ—è –ø–æ–º–∏–ª–æ–∫": f"""
            –¢–∏ ‚Äî —É–≤–∞–∂–Ω–∏–π –∫–æ—Ä–µ–∫—Ç–æ—Ä. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç—ñ, –Ω–µ –∑–º—ñ–Ω—é—é—á–∏ –π–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
            –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:
            1. –í–∏–ø—Ä–∞–≤ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ, –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ —Ç–∞ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ–π–Ω—ñ –ø–æ–º–∏–ª–∫–∏.
            2. –ù–ï –∑–º—ñ–Ω—é–π —Ä–æ–∑–±–∏—Ç—Ç—è –Ω–∞ –∞–±–∑–∞—Ü–∏ —ñ –ù–ï –¥–æ–¥–∞–≤–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫.
            3. –ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç.
            –û—Å—å —Å–∏—Ä–∏–π —Ç–µ–∫—Å—Ç: --- {raw_text} ---
        """,
        "–°—Ç–∏—Å–ª–∏–π –ø–µ—Ä–µ–∫–∞–∑ (—Ç–µ–∑–∏)": f"""
            –¢–∏ ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫. –ü—Ä–æ—á–∏—Ç–∞–π —Ü–µ–π —Ç–µ–∫—Å—Ç —ñ –Ω–∞–ø–∏—à–∏ –π–æ–≥–æ —Å—Ç–∏—Å–ª–∏–π –ø–µ—Ä–µ–∫–∞–∑ —É –≤–∏–≥–ª—è–¥—ñ —Ç–µ–∑ (–∫–ª—é—á–æ–≤—ñ –¥—É–º–∫–∏).
            –ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∑–∏.
            –û—Å—å —Å–∏—Ä–∏–π —Ç–µ–∫—Å—Ç: --- {raw_text} ---
        """
    }
    
    try:
        model = genai.GenerativeModel(AI_MODEL_NAME)
        response = model.generate_content(prompts[style])
        return response.text
    except Exception as e:
        st.warning(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ({filename}): {e}")
        return raw_text

@st.cache_data
def generate_summary_page(_processed_articles: tuple):
    """–°—Ç–≤–æ—Ä—é—î —Ç–∏—Ç—É–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É-–∑–º—ñ—Å—Ç –¥–ª—è –≤—Å—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    full_text = "\n\n--- –ù–û–í–ê –°–¢–ê–¢–¢–Ø ---\n\n".join(_processed_articles)
    try:
        model = genai.GenerativeModel(AI_MODEL_NAME)
        prompt = f"""
        –¢–∏ ‚Äî –Ω–∞—É–∫–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –Ω–∞–±—ñ—Ä —Å—Ç–∞—Ç–µ–π, –Ω–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∏–∂—á–µ.
        –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏—Ç—É–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞ –∑–º—ñ—Å—Ç –¥–ª—è –Ω–∞—É–∫–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏.
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
        1.  **–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫**: –ü—Ä–∏–¥—É–º–∞–π –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—Å—å–æ–≥–æ –∑–±—ñ—Ä–Ω–∏–∫–∞ —Å—Ç–∞—Ç–µ–π.
        2.  **–ó–º—ñ—Å—Ç**: –î–ª—è –ö–û–ñ–ù–û–á —Å—Ç–∞—Ç—Ç—ñ –Ω–∞–ø–∏—à–∏:
            - –á—ó –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–∞ –Ω–∞–∑–≤—É.
            - –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ–∫–∞–∑ (1-2 —Ä–µ—á–µ–Ω–Ω—è).
            - –ö–ª—é—á–æ–≤—ñ –æ—Å–æ–±–∏, –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –ª–æ–∫–∞—Ü—ñ—ó, —â–æ –≤ –Ω—ñ–π –∑–≥–∞–¥—É—é—Ç—å—Å—è.
        3.  **–ó–∞–≥–∞–ª—å–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞**: –í –∫—ñ–Ω—Ü—ñ –Ω–∞–ø–∏—à–∏ 5-7 –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –≤—Å—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        
        –ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É, –±–µ–∑ –∑–∞–π–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.
        –û—Å—å —Å—Ç–∞—Ç—Ç—ñ:
        ---
        {full_text}
        ---
        """
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º—ñ—Å—Ç—É: {e}")
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–º—ñ—Å—Ç."

# =======================
# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ DOCX
# =======================
def save_full_document_to_docx(summary_page: str, articles: list):
    """–ó–±–∏—Ä–∞—î —Ç–∏—Ç—É–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞ –æ–±—Ä–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ –≤ –æ–¥–∏–Ω DOCX —Ñ–∞–π–ª."""
    doc = Document()
    doc.add_heading('–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–º—ñ—Å—Ç —Ç–∞ –∞–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞', level=1)
    doc.add_paragraph(summary_page)
    doc.add_page_break()
    
    for article_text in articles:
        doc.add_paragraph(article_text)
        doc.add_page_break()
        
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# ===================================================================
# –Ü–ù–¢–ï–†–§–ï–ô–° –ü–†–û–ì–†–ê–ú–ò (Streamlit UI)
# ===================================================================
st.set_page_config(page_title="–ê—Ä—Ö—ñ–≤–Ω–∏–π –ê—Å–∏—Å—Ç–µ–Ω—Ç PRO", layout="wide")
st.title("üóÇÔ∏è –ê—Ä—Ö—ñ–≤–Ω–∏–π –ê—Å–∏—Å—Ç–µ–Ω—Ç PRO")

if "files_data" not in st.session_state:
    st.session_state.files_data = {}

st.header("–ö—Ä–æ–∫ 1: –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –æ–±—Ä–æ–±–∫—É —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª–∏")

col1, col2 = st.columns(2)
with col1:
    processing_style = st.selectbox(
        "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è AI:",
        ("–õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", "–¢—ñ–ª—å–∫–∏ –∫–æ—Ä–µ–∫—Ü—ñ—è –ø–æ–º–∏–ª–æ–∫", "–°—Ç–∏—Å–ª–∏–π –ø–µ—Ä–µ–∫–∞–∑ (—Ç–µ–∑–∏)")
    )
with col2:
    uploaded_files = st.file_uploader(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –æ–¥—Ä–∞–∑—É –¥–µ–∫—ñ–ª—å–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å:",
        type=["jpg", "png"],
        accept_multiple_files=True
    )

if uploaded_files:
    if st.button("üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤", type="primary"):
        st.session_state.files_data = {}
        with st.spinner("AI –ø—Ä–∞—Ü—é—î... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å."):
            for i, uploaded_file in enumerate(uploaded_files):
                # =================================================
                # –û–°–¨ –¢–£–¢ –ë–£–õ–û –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: .id -> .file_id
                # =================================================
                file_id = uploaded_file.file_id
                
                img_bytes = uploaded_file.getvalue()
                
                raw_text = ocr_with_gemini_vision(img_bytes, uploaded_file.name)
                processed_text = process_text_with_gemini(raw_text, processing_style, uploaded_file.name)
                
                st.session_state.files_data[file_id] = {
                    "name": uploaded_file.name,
                    "raw": raw_text,
                    "processed": processed_text,
                    "selected": True
                }
        st.success("–û–±—Ä–æ–±–∫—É –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if st.session_state.files_data:
    st.header("–ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    for file_id, data in st.session_state.files_data.items():
        with st.expander(f"{data['name']}", expanded=False):
            data['selected'] = st.checkbox("–î–æ–¥–∞—Ç–∏ —Ü—é —Å—Ç–∞—Ç—Ç—é –¥–æ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞", value=data['selected'], key=f"cb_{file_id}")
            st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏", data['processed'], height=200, key=f"txt_{file_id}")

    st.header("–ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä—ñ—Ç—å —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç")
    
    selected_articles = [data['processed'] for data in st.session_state.files_data.values() if data['selected']]
    
    if not selected_articles:
        st.warning("–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó —Å—Ç–∞—Ç—Ç—ñ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç.")
    else:
        st.info(f"–ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç –∑ {len(selected_articles)} –æ–±—Ä–∞–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π.")
        if st.button("üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∑ —Ç–∏—Ç—É–ª—å–Ω–æ—é —Å—Ç–æ—Ä—ñ–Ω–∫–æ—é"):
            with st.spinner("AI –≥–µ–Ω–µ—Ä—É—î –∑–º—ñ—Å—Ç..."):
                summary_page_text = generate_summary_page(tuple(selected_articles))
            
            st.subheader("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑–º—ñ—Å—Ç:")
            st.markdown(summary_page_text)

            docx_buffer = save_full_document_to_docx(summary_page_text, selected_articles)
            
            st.download_button(
                label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (.docx)",
                data=docx_buffer,
                file_name="PRO_Archive_Document.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )

